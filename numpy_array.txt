========МАССИВЫ========
Массив в программировании — это ещё одна структура данных. Она позволяет хранить элементы в заданном порядке точно так же, как это делают списки. 

Однако массивы обладают особым свойством: элемент по любому номеру из массива можно получить за одно и то же время. Другими словами, неважно, находится элемент в начале, в середине или в конце списка — на времени получения элемента из массива по индексу (номеру) это никак не скажется.

Итак, массив — это структура данных, в которой:
1. Элементы хранятся в указанном порядке.
2. Каждый элемент можно получить по индексу за одинаковое время.
3. Все элементы приведены к одному и тому же типу данных.
4. Максимальное число элементов и объём выделенной памяти заданы заранее.

Размерностью массива называют то число индексов, которое необходимо для однозначного получения элемента из массива.
- Соответственно, чтобы найти элемент в массиве размерности 1 (строка из чисел) достаточно одного индекса.
- В двумерном массиве (таблице из чисел) потребуется уже два индекса: номер строки и номер столбца.
- Для трёхмерного массива (например, контейнеры на судне расположены по длине, ширине и высоте судна) потребуется уже три индекса.

Форма (структура) массива — это информация о количестве размерностей массива и протяжённости массива по каждой из размерностей. Например, можно задать двумерный массив размера 3x5 — у этой таблицы две размерности: 3 строки и 5 столбцов.

========Создание массивов========
Создание массива из списка
arr = np.array([1,5,2,9,10])
arr = np.array([1, 2, 3])
print(arr)

[1 2 3]

Функция np.array возвращает объекты типа numpy.ndarray. Название ndarray — это сокращение от n-dimensional array, n-мерный массив.
print(type(arr))
<class 'numpy.ndarray'>

Двумерный массив из списка списков.
arr = np.array([[1, 2, 3],
                [4, 5, 6]])
print(arr)
print(type(arr))
[[1 2 3]
 [4 5 6]]

========Типы данных в массиве========
Узнать это можно, напечатав свойство dtype:
arr = np.array([1,5,2,9,10])
print(arr.dtype)

# int32

Задать тип данных сразу при создании массива можно с помощью параметра dtype:
arr = np.array([1,5,2,9,10], dtype=np.int8)
print(arr)
print(arr.dtype)

# [ 1  5  2  9 10]
# int8

Теперь, если добавить в arr число больше 127 или меньше -128, оно потеряет исходное значение, как и при преобразовании к меньшему типу:
arr = np.array([1,5,2,9,10], dtype=np.int8)
arr[0] = 128
print(arr)
# [-128    5    2    9   10]

Если добавить float в массив int, пропадёт десятичная часть:
arr = np.array([1,5,2,9,10], dtype=np.int8)
arr[0] = 2.5
print(arr)
# [ 2  5  2  9 10]

Строку, которую можно преобразовать в число, можно сразу положить в массив. Она будет приведена к нужному типу автоматически:
arr = np.array([1,5,2,9,10], dtype=np.int8)
arr[0] = "3"
print(arr)

# [ 3  5  2  9 10]

А вот при попытке положить в массив строку, которую нельзя преобразовать в число, возникнет ошибка:
arr = np.array([1,5,2,9,10], dtype=np.int8)
arr[0] = "test"
print(arr)

ValueError: invalid literal for int() with base 10: 'test'


Поменять тип данных во всём массиве можно с помощью тех же функций, которыми мы пользовались для преобразования типов отдельных переменных в предыдущем юните (например, np.int32 или np.float128):
arr = np.array([1,5,2,9,10], dtype=np.int8)
arr = np.float16(arr)
print(arr)
print(arr.dtype)

# [ 1.  5.  2.  9. 10.]
# float16

При преобразовании типов данных в массиве не забывайте о том, что часть чисел может потерять смысл, если менять тип данных с более ёмкого на менее ёмкий:
arr = np.array([1,-5,2,9,10], dtype=np.int8)
print(arr)
arr = np.uint8(arr)
print(arr)

# [ 1 -5  2  9 10]
# [  1 251   2   9  10]

========Свойства NumPy-массивов========
Узнать размерность массива можно с помощью .ndim:
arr_1 = np.array([1,-5,2,9,10], dtype=np.int8)
arr_2 = np.array([[1,2,3],
                  [4,5,6]], dtype=np.int16)
				  
print(arr_1.ndim)
print(arr_2.ndim)

# 1
# 2

Узнать общее число элементов в массиве можно с помощью .size:
arr_1 = np.array([1,2,3,4], dtype=np.int8)
arr_2 = np.array([[1,2,3],
                  [4,5,6]], dtype=np.int16)

print(arr_1.size)
print(arr_2.size)

# 4
# 6

Форма или структура массива хранится в атрибуте .shape. Форма массива хранится в виде кортежа с числом элементов, равным размерности массива. Соответственно, для одномерного массива напечатан кортеж длины 1. Обратите внимание, что для двумерного массива вначале было напечатано число «строк», а затем число «столбцов». Это так только отчасти. На самом деле массив как бы состоит из внешних и внутренних массивов: вспомните, что мы передавали список, состоящий из трёх списков, длина каждого из которых равнялась трём. Форма массива определяется от длины внешнего массива (3) к внутреннему (3).
print(arr_1.shape)
print(arr_2.shape)

(4,)
(2, 3)

Наконец, узнать, сколько «весит» каждый элемент массива в байтах позволяет .itemsize:
print(arr_1.itemsize)
print(arr_2.itemsize)

# 1
# 2

========Заполнение новых массивов========
Не всегда значения, которые будут храниться в массиве, уже доступны, а иметь для них массив уже хочется. Можно заранее подготовить массив заданной размерности, заполненный нулями, а потом загружать в него реальные данные по мере необходимости.

Массив из нулей создаётся функцией np.zeros. Она принимает аргументы shape (обязательный) — форма массива (одно число или кортеж) и dtype (необязательный) — тип данных, который будет храниться в массиве.

Создадим одномерный массив из пяти элементов:
arr_5 = np.zeros(5)
print(arr_5)

# [0. 0. 0. 0. 0.]

Создадим трёхмерный массив с формой 5x4x3 и типом float32:
arr_3d = np.zeros((2, 3, 4), dtype=np.float32)
print(arr_3d)

[[[0. 0. 0. 0.]
  [0. 0. 0. 0.]
  [0. 0. 0. 0.]]

 [[0. 0. 0. 0.]
  [0. 0. 0. 0.]
  [0. 0. 0. 0.]]]
  
===========
Ещё одной удобной функцией для создания одномерных массивов является arange. Она аналогична встроенной функции range, но обладает рядом особенностей. Вот её сигнатура: arange([start,] stop, [step,], dtype=None).

Аргументы start (по умолчанию 0), step (по умолчанию 1) и dtype (определяется автоматически) являются необязательными:

- start (входит в диапазон возвращаемых значений) задаёт начальное число;
- stop (не входит в диапазон возвращаемых значений, как и при использовании range) задаёт правую границу диапазона;
- step задаёт шаг, с которым в массив добавляются новые значения.
В отличие от range, в функции arange все перечисленные параметры могут иметь тип float.

Создадим массив из пяти чисел от 0 до 4:
np.arange(5)
# array([0, 1, 2, 3, 4])

Создадим массив от 2.5 до 5:
np.arange(2.5, 5)
# array([2.5, 3.5, 4.5])

Создадим массив от 2.5 до 5 с шагом 0.5:
np.arange(2.5, 5, 0.5)
# array([2.5, 3. , 3.5, 4. , 4.5])

Создадим массив от 2.5 до 5 с шагом 0.5 и с типом float16:
np.arange(2.5, 5, 0.5, dtype=np.float16)
# array([2.5, 3. , 3.5, 4. , 4.5], dtype=float16)

===========

На самом деле операции с плавающей точкой не всегда бывают предсказуемыми из-за особенностей хранения таких чисел в памяти компьютера. Поэтому для работы с дробными параметрами start, stop и step лучше использовать функцию linspace (англ. linear space — линейное пространство). Она тоже возвращает одномерный массив из чисел, расположенных на равном удалении друг от друга между началом и концом диапазона, но обладает немного другим поведением и сигнатурой:

np.linspace(start, stop, num=50, endpoint=True, retstep=False, dtype=None)

start и stop являются обязательными параметрами, задающими начало и конец возвращаемого диапазона;
num — параметр, задающий число элементов, которое должно оказаться в массиве (по умолчанию 50);
endpoint — включён или исключён конец диапазона (по умолчанию включён);
retstep (по умолчанию False) позволяет указать, возвращать ли использованный шаг между значениями, помимо самого массива;
dtype — уже хорошо знакомый нам параметр, задающий тип данных (если не задан, определяется автоматически).
Давайте потренируемся. Создадим массив из десяти чисел между 1 и 2:

arr = np.linspace(1, 2, 10)
print(arr)
# [1.         1.11111111 1.22222222 1.33333333 1.44444444 1.55555556
 1.66666667 1.77777778 1.88888889 2.        ]
 
Создадим массив из десяти чисел между 1 и 2, не включая 2:
arr = np.linspace(1, 2, 10, endpoint=False)
print(arr)
# [1.  1.1 1.2 1.3 1.4 1.5 1.6 1.7 1.8 1.9]

Узнаем, какой шаг был использован для создания массива из десяти чисел между 1 и 2, где 2 включалось и не включалось:
arr, step = np.linspace(1, 2, 10, endpoint=True, retstep=True)
print(step)
# 0.1111111111111111

arr, step = np.linspace(1, 2, 10, endpoint=False, retstep=True)
print(step)
# 0.1

→ Функцию linspace очень удобно использовать при построении графиков различных функций, поскольку она позволяет получить равномерный массив чисел, к которому можно применить исследуемую функцию и показать результат на графике.

===========Сортировка одномерных массивов===========

Иногда возникает задача по сортировке значений в массиве. Для её решения существуют встроенная в NumPy функция sort. Она обладает дополнительными параметрами, в том числе возможностью сортировки многомерных массивов, однако пока что это нам не потребуется. Применять функцию можно двумя способами.

Способ 1. Функция np.sort(<массив>) возвращает новый отсортированный массив:
arr = np.array([23,12,45,12,23,4,15,3])
arr_new = np.sort(arr)
print(arr)
# [23 12 45 12 23  4 15  3]
print(arr_new)
# [ 3  4 12 12 15 23 23 45]

Способ 2. Функция <массив>.sort() сортирует исходный массив и возвращает None:
arr = np.array([23,12,45,12,23,4,15,3])
print(arr.sort())
# None
print(arr)
# [ 3  4 12 12 15 23 23 45]

=====Работа с пропущенными данными=====
Начнём с примера — создадим массив:
data = np.array([4, 9, -4, 3])
Воспользуемся встроенной в NumPy функцией sqrt, чтобы посчитать квадратные корни из элементов.
roots = np.sqrt(data)
roots
# RuntimeWarning: invalid value encountered in sqrt
# array([2.        , 3.        ,        nan, 1.73205081])

NumPy выдал предупреждение о том, что в функцию sqrt попало некорректное значение. Это было число -4, а как вы помните, корень из отрицательного числа в действительных числах не берётся. Однако программа не сломалась окончательно, а продолжила работу. На том месте, где должен был оказаться корень из -4, теперь присутствует объект nan. Он расшифровывается как Not a number (не число). Этот объект аналогичен встроенному типу None, но имеет несколько отличий:

Отличие 1. None является отдельным объектом типа NoneType. np.nan — это отдельный представитель класса float:
print(type(None))
# <class 'NoneType'>
print(type(np.nan))
# <class 'float'>
type(np.nan)

Отличие 2. None могут быть равны друг другу, а np.nan — нет:
print(None == None)
# True
print(np.nan == np.nan)
# False

Как вы помните, чтобы грамотно сравнить что-либо с None, необходимо использовать оператор is. Это ещё более актуально для np.nan. Однако None даже через is не является эквивалентным np.nan:
print(None is None)
# True
print(np.nan is np.nan)
# True
print(np.nan is None)
# False

Иногда работать с отсутствующими данными всё же нужно. Они могут возникнуть не только потому, что мы применили функцию к некорректному аргументу. Например, при анализе вакансий на сайте для некоторых из них может быть не указана зарплата, но при этом нам необходимо проанализировать статистику по зарплатам на сайте. Если попробовать посчитать сумму массива, который содержит np.nan, в итоге получится nan:
sum(roots)
# nan

Что же делать?
Можно заполнить пропущенные значения, например, нулями. Для этого с помощью функции np.isnan(<массив>) узнаем, на каких местах в массиве находятся «не числа»:

np.isnan(roots)
# array([False, False,  True, False])

Можно использовать полученный массив из True и False для извлечения элементов из массива roots, на месте которых в булевом массиве указано True. Таким способом можно узнать сами элементы, которые удовлетворяют условию np.isnan:

roots[np.isnan(roots)]
# array([nan])

Этим элементам можно присвоить новые значения, например 0:

roots[np.isnan(roots)] = 0
roots
# array([2.        , 3.        , 0.        , 1.73205081])

После этого, если пропущенных значений больше нет, можем подсчитать сумму элементов массива:

sum(roots)
# 6.732050807568877

Ранее проблема при подсчёте суммы элементов в массиве roots возникала из-за того, что отсутствовало значение для квадратного корня из -4 — вместо него было указано np.nan. Сумма элементов массива, содержащего nan, также является nan. Поэтому приходится заменить nan, например, на 0, чтобы подсчитать сумму элементов массива.
===========ПОДГОТОВКА СРЕДЫ / УСТАНОВКА ПАКЕТОВ===========
https://sites.google.com/chromium.org/driver/downloads
	ссылка на драйвер для chrome

python -m venv selenium_env
	Создадим виртуальное окружение selenium_env:

selenium_env\Scripts\activate.bat
	Запустим созданный для нас приложением venv файл activate.bat, чтобы активировать окружение:
	
pip3 install selenium webdriver-manager
	-установка selenium и webdriver-manager (позволяет автоматически скачивать самую актуальную версию драйвера для того или иного браузера, без каких-либо дополнительных скачиваний)
	
pip3 list
	-перечень всех установленных библиотек

pip3 freeze > requirements.txt
	-создает в папке venv файл requirements.txt с перечнем всех исользуемых в проекте библиотек

===========ИМПОРТЫ / КЛАССЫ===========
from selenium import webdriver		# webdriver это и есть набор команд для управления браузером
from webdriver_manager.chrome import ChromeDriverManager	# драйвер для хром
from selenium.webdriver.chrome.service import Service	# класс Service отвечает за установку драйвера, за его открытие и его закрытие 
from selenium.webdriver.common.by import By		# импортируем класс By, который позволяет выбрать способ поиска элемента
import time

===========ИНИЦИАЛИЗАЦИЯ===========
driver = webdriver.Chrome()
	инициализируем драйвер браузера. После этой команды вы должны увидеть новое открытое окно браузера

1. Иницализация в одну строчку, через SeleniumManager - он автоматически распознает ваш Chrome и запустит его. Но важно перед этим найти у себя на компьютере через поиск chromedriver.exe и удалить его!
	from selenium import webdriver
	driver = webdriver.Chrome()

2. Инициализация через WebDriverManager
	from webdriver_manager.chrome import ChromeDriverManager
	from selenium.webdriver.chrome.service import Service
	service = Service(ChromeDriverManager().install())
	driver = webdriver.Chrome(service=service)
	
3. Инициализация через WebDriverManager + версия Chrome
	from webdriver_manager.chrome import ChromeDriverManager
	from selenium.webdriver.chrome.service import Service
	service = Service(ChromeDriverManager(driver_version="114.0.5735.16").install())
	driver = webdriver.Chrome(service=service)

===========НАВИГАЦИЯ===========
driver.get("https://suninjuly.github.io/text_input_task.html")
	Метод get сообщает браузеру, что нужно открыть сайт по указанной ссылке
	
driver.back()
	метод back говорит браузеру вернуться на предыдущую страницу. если ссылка откралась в новом окне, то возврата на предыдущую страницу не произойдет
	
driver.forward()
	метод forward возвращает нас на одну страницу вперед (это та, с которой мы вернулись назад...)

driver.refresh()
	метод refresh обновляет страницу
	
===========ПОЛУЧЕНИЕ ДАННЫХ ИЗ БРАУЗЕРА===========
driver.current_url
	атрибут current_url выводит данные о текущем URL
	
driver.current_title
	атрибут current_title возвращает тайтл текущей страницы
	
driver.page_source
	получить код всей страницы. используется в автоматизации для парсинга и сравнения данных
	
===========ВАЛИДАЦИЯ ДАННЫХ===========
assert url == "https://www.wikipedia.org/", "адреса не равны"
	метод assert позволяет сравнить данные, в случае несоответствия вывод сообщение в кавычках


textarea = driver.find_element(By.CSS_SELECTOR, ".textarea")
	Ищем поле для ввода текста. Метод find_element позволяет найти нужный элемент на сайте, указав путь к нему. Метод принимает в качестве аргументов способ поиска и значение, по которому мы будем искать

textarea.send_keys("get()")			# Напишем текст ответа в найденное поле

submit_button = driver.find_element(By.CSS_SELECTOR, ".submit-submission")		# Найдем кнопку, которая отправляет введенное решение

submit_button.click()		# Скажем драйверу, что нужно нажать на кнопку. После этой команды мы должны увидеть сообщение о правильном ответе

# находим элемент, содержащий текст
welcome_text_elt = browser.find_element(By.TAG_NAME, "h1")
# записываем в переменную welcome_text текст из элемента welcome_text_elt
welcome_text = welcome_text_elt.text

Метод get_attribute
	people_radio = browser.find_element(By.ID, "peopleRule")
	Найдём атрибут "checked" с помощью встроенного метода get_attribute и проверим его значение:
	people_checked = people_radio.get_attribute("checked")
	print("value of people radio: ", people_checked)

# После выполнения всех действий мы должны не забыть закрыть окно браузера
driver.quit()

Работа со списками
	from selenium.webdriver.support.ui import Select
	select = Select(browser.find_element(By.TAG_NAME, "select"))
	select.select_by_value("1") # ищем элемент с текстом "Python"
	
Загрузка файлов
Если нам понадобится загрузить файл на веб-странице, мы можем использовать уже знакомый нам метод send_keys. Только теперь нам нужно в качестве аргумента передать путь к нужному файлу на диске вместо простого текста
	import os 

	current_dir = os.path.abspath(os.path.dirname(__file__))    # получаем путь к директории текущего исполняемого файла 
	file_path = os.path.join(current_dir, 'file.txt')           # добавляем к этому пути имя файла 
	element.send_keys(file_path)

Selenium Waits (Implicit Waits)
	from selenium import webdriver
	from selenium.webdriver.common.by import By
	browser = webdriver.Chrome()
	# говорим WebDriver искать каждый элемент в течение 5 секунд
	browser.implicitly_wait(5)

	browser.get("http://suninjuly.github.io/wait1.html")

Explicit Waits (WebDriverWait и expected_conditions)
	Чтобы тест был надежным, нам нужно не только найти кнопку на странице, но и дождаться, когда кнопка станет кликабельной. Для реализации подобных ожиданий в Selenium WebDriver существует понятие явных ожиданий (Explicit Waits), которые позволяют задать специальное ожидание для конкретного элемента. Задание явных ожиданий реализуется с помощью инструментов WebDriverWait и expected_conditions. Улучшим наш тест:
	
	from selenium.webdriver.common.by import By
	from selenium.webdriver.support.ui import WebDriverWait
	from selenium.webdriver.support import expected_conditions as EC
	from selenium import webdriver

	browser = webdriver.Chrome()

	browser.get("http://suninjuly.github.io/wait2.html")

	# говорим Selenium проверять в течение 5 секунд, пока кнопка не станет кликабельной
	button = WebDriverWait(browser, 5).until(
        EC.element_to_be_clickable((By.ID, "verify"))
    )
	button.click()
	message = browser.find_element(By.ID, "verify_message")
	
	В модуле expected_conditions есть много других правил, которые позволяют реализовать необходимые ожидания:

		title_is
		title_contains
		presence_of_element_located
		visibility_of_element_located
		visibility_of
		presence_of_all_elements_located
		text_to_be_present_in_element
		text_to_be_present_in_element_value
		frame_to_be_available_and_switch_to_it
		invisibility_of_element_located
		element_to_be_clickable
		staleness_of
		element_to_be_selected
		element_located_to_be_selected
		element_selection_state_to_be
		element_located_selection_state_to_be
		alert_is_present


===========Поиск элементов с помощью Selenium===========
Для поиска элементов на странице в Selenium WebDriver используются несколько стратегий, позволяющих искать:
	- по атрибутам или тегам элементов: ID, class, и т.д.
	- текстам в ссылках,
	- CSS-селекторам - Поиск с помощью CSS-селекторов, является наиболее удобным способом, т.к. он покрывает практически все возможные ситуации, и CSS-селекторы выглядят более читабельными.
	- XPath-селекторам. 

Для поиска Selenium предоставляет метод find_element, который принимает два аргумента:
1. тип локатора
2. значение локатора. 
Существуют следующие методы поиска элементов:
	find_element(By.ID, value) — поиск по уникальному атрибуту id элемента. Если ваши разработчики проставляют всем элементам в приложении уникальный id, то вам повезло, и вы чаще всего будет использовать этот метод, так как он наиболее стабильный;
	find_element(By.CSS_SELECTOR, value) — поиск элемента с помощью правил на основе CSS. Это универсальный метод поиска, так как большинство веб-приложений использует CSS для вёрстки и задания оформления страницам. Если find_element_by_id вам не подходит из-за отсутствия id у элементов, то скорее всего вы будете использовать именно этот метод в ваших тестах;
	find_element(By.XPATH, value) — поиск с помощью языка запросов XPath, позволяет выполнять очень гибкий поиск элементов;
	find_element(By.NAME, value) — поиск по атрибуту name элемента;
	find_element(By.TAG_NAME, value) — поиск элемента по названию тега элемента;
	find_element(By.CLASS_NAME, value) — поиск по значению атрибута class;
	find_element(By.LINK_TEXT, value) — поиск ссылки на странице по полному совпадению;
	find_element(By.PARTIAL_LINK_TEXT, value) — поиск ссылки на странице, если текст селектора совпадает с любой частью текста ссылки.


